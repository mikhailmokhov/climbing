# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Deploy to Digital Ocean

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

env:
  JDK_IMAGE: steel8rat/openjdk8
  NGINX_IMAGE: steel8rat/nginx
  IMAGE_TAG: ${{ github.sha }} # take commit sha as a image tag

  K8S_CLUSTER_NAME: k8s-dev
  K8S_CONFIG_FOLDER: k8s

# Used for pulling java packages from github in case there are any
#  GRADLE_GPR_KEY: ${{ secrets.GRADLE_GPR_KEY }}
#  GRADLE_GPR_USER: steel8rat


jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: build/libs/


  build_api_server_image:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: build/libs

      - name: Downloaded files
        run: ls -R
        working-directory: build/libs/artifact

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build --build-arg JAR_FILE=build/libs/artifact/*.jar --file docker/api-server/Dockerfile --tag $JDK_IMAGE:$IMAGE_TAG .

      - name: Push image to Dockerhub
        run: docker push $JDK_IMAGE:$IMAGE_TAG


  build_nginx_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build --build-arg HTML_FOLDER=html --file docker/nginx/Dockerfile --tag $NGINX_IMAGE:$IMAGE_TAG .

      - name: Push image to Dockerhub
        run: docker push $NGINX_IMAGE:$IMAGE_TAG


  deploy_to_do:
    needs:
      - build_api_server_image
      - build_nginx_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Update api-server deployment file
        run: sed -i 's|<TAG>|'${IMAGE_TAG}'|' $GITHUB_WORKSPACE/$K8S_CONFIG_FOLDER/api-server.yml

      - name: Update api-server deployment file
        run: sed -i 's|<TAG>|'${IMAGE_TAG}'|' $GITHUB_WORKSPACE/$K8S_CONFIG_FOLDER/nginx.yml

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save $K8S_CLUSTER_NAME

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/$K8S_CONFIG_FOLDER

      - name: Verify deployments
        run: kubectl get deployments --output name | xargs -n1 kubectl rollout status

      - name: Remove old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '1 hour'

      - name: Slack notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: routesetter # Optional. (defaults to webhook app)
          SLACK_CHANNEL: routesetter # Optional. (defaults to webhook)
          SLACK_AVATAR: repository # Optional. can be (repository, sender, an URL) (defaults to webhook app avatar)
        uses: Ilshidur/action-slack@master
        with:
          args: 'Deployed to Kubernetis' # Optional
