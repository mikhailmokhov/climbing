# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Deploy to Digital Ocean

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

env:
  DOCKER_IMAGE_NAME: steel8rat/image-search
  DOCKER_FILE: docker/ubuntu/Dockerfile
  DOCKER_IMAGE_TAG: ${{ github.sha }} # take commit sha as a image tag

  KUBERNETIS_CLUSTER_NAME: k8s-dev

# Used for pulling java packages from github in case there are any
#  GRADLE_GPR_KEY: ${{ secrets.GRADLE_GPR_KEY }}
#  GRADLE_GPR_USER: steel8rat


jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 14

      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Package
          path: build/libs

  build_docker_image:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: Package
          path: build/libs

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build --build-arg JAR_FILE=build/libs/*.jar --file $DOCKER_FILE --tag $IMAGE_NAME:$GITHUB_SHA .

      - name: Push image to Dockerhub
        run: docker push $IMAGE_NAME

      - name: Remove old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '1 hour'

  deploy_to_do:
    needs: build_docker_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Update deployment file
        run: sed -i 's|<IMAGE>|'${IMAGE_NAME}':'${GITHUB_SHA}'|' $GITHUB_WORKSPACE/config/do-config.yml

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save $KUBERNETIS_CLUSTER_NAME

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/config/do-config.yml

      - name: Verify deployment
        run: kubectl rollout status deployment/image-search